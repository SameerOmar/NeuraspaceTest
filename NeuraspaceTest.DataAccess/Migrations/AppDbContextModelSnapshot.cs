// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeuraspaceTest.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NeuraspaceTest.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NeuraspaceTest.Models.CollisionEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<string>("ChaserObjectId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chaser_object_id");

                    b.Property<DateTime>("CollisionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("collision_date");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_id");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_id");

                    b.Property<double>("ProbabilityOfCollision")
                        .HasColumnType("double precision")
                        .HasColumnName("probability_of_collision");

                    b.Property<int>("operator_id")
                        .HasColumnType("integer");

                    b.Property<int>("satellite_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("operator_id");

                    b.HasIndex("satellite_id");

                    b.ToTable("CollisionEvents");
                });

            modelBuilder.Entity("NeuraspaceTest.Models.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_name");

                    b.Property<string>("OperatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operator_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId")
                        .IsUnique();

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("NeuraspaceTest.Models.Satellite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("satellite_name");

                    b.Property<string>("SatelliteId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("satellite_id");

                    b.Property<int>("operator_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SatelliteId")
                        .IsUnique();

                    b.HasIndex("operator_id");

                    b.ToTable("Satellites");
                });

            modelBuilder.Entity("NeuraspaceTest.Models.CollisionEvent", b =>
                {
                    b.HasOne("NeuraspaceTest.Models.Operator", "Operator")
                        .WithMany("CollisionEvents")
                        .HasForeignKey("operator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeuraspaceTest.Models.Satellite", "Satellite")
                        .WithMany("CollisionEvents")
                        .HasForeignKey("satellite_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Satellite");
                });

            modelBuilder.Entity("NeuraspaceTest.Models.Satellite", b =>
                {
                    b.HasOne("NeuraspaceTest.Models.Operator", "Operator")
                        .WithMany("Satellites")
                        .HasForeignKey("operator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("NeuraspaceTest.Models.Operator", b =>
                {
                    b.Navigation("CollisionEvents");

                    b.Navigation("Satellites");
                });

            modelBuilder.Entity("NeuraspaceTest.Models.Satellite", b =>
                {
                    b.Navigation("CollisionEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
